struct PSINPUT {
	float4 position : SV_POSITION;
	float2 uv : TEXCOORD0;
};

struct PSOUTPUT {
	float4 color : SV_Target0;
};

#define RG_SMAPLE_LEVEL 0

Texture2D t_unit0 : register(t0); // alb
Texture2D t_unit1 : register(t1); // norm
Texture2D t_unit2 : register(t2); // wpos
Texture2D t_unit3 : register(t3); // light
Texture2D t_unit4 : register(t4); // depth
SamplerState SampleType : register(s0);

cbuffer ConstBuffer : register(b0) {
	row_major float4x4 proj;
	row_major float4x4 view;
	row_major float4x4 viewProj;
	row_major float4x4 invProj;
	row_major float4x4 invView;
	float4 camera_position;
	int screen_size;
};

float GetDepth(float2 uv) {
	return t_unit4.SampleLevel(SampleType, uv, RG_SMAPLE_LEVEL).r;
}

bool IsOutside(float2 ray) {
	return (ray.x > 1 || ray.y > 1 || ray.x < 0 || ray.y < 0) ? true : false;
}

// World-space to screen-space (NDC)
float4 Project(float4 pos) {
	float4 v = mul(pos, viewProj);
	return v / v.w;
}

float4 TraceRay(float3 wpos, float3 dir) {
	float maxRayDistance = 20;

	float  stepsize = 0.3f;
	int    steps    = 300;

	float3 startpos = wpos;
	float3 pos      = startpos;

	[loop]
	for(int i = 0; i < steps; i++) {
		pos = pos + dir * stepsize;
		float3 projected = Project(float4(pos, 1)).xyz;
		float2 _uv = projected.xy * 0.5 + 0.5;
		_uv.y = 1 - _uv.y;

		if(IsOutside(_uv)) {
			// Out of bounds
			return 0;
		}
		
		float proj_depth   = projected.z;   // Projected depth
		float sample_depth = GetDepth(_uv); // Sample depth
		
		float diff = proj_depth - sample_depth;
		if(diff >= 0 && diff < 0.01) {
			// Hit
			float4 result = t_unit3.Sample(SampleType, _uv);
			result.a = 1; // ignore alpha channel
			return result;
		}
	}

	// Miss
	return 0;
}

// TODO: Screen-space global illumination

PSOUTPUT pmain(PSINPUT psin, float4 fragCoord : SV_Position) {
	int screenx = screen_size >> 16;
	int screeny = screen_size & 0x0000FFFF;
	float2 noproj_uv = fragCoord.xy/float2(screenx, screeny);

	float4 nor_rou = t_unit1.Sample(SampleType, noproj_uv);
	float4 wps_emi = t_unit2.Sample(SampleType, noproj_uv);

	float3 N = normalize(nor_rou.xyz); // Normal
	float3 P = wps_emi.xyz;            // Position
	float  R = nor_rou.w;              // Roughtness
	float  E = wps_emi.w;              // Emission



	float4 tColor = 0;

	tColor.xyz = t_unit3.Sample(SampleType, noproj_uv).xyz;
	tColor.w = 1;

	PSOUTPUT pout;
	pout.color.rgba = tColor;
	return pout;

}