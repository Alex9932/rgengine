struct PSINPUT {
	float4 position : SV_POSITION;
	float3 vpos     : VPOS;
};

struct PSOUTPUT {
	float4 albedo : SV_Target0; // Albedo, metallic;
	float4 normal : SV_Target1; // Normal, roughness;
	float4 wpos   : SV_Target2; // WPos, emissive;
};

cbuffer ConstBuffer : register(b0) {
	float3 sun_dir;
	float  turbidity;
	float3 camerapos;
	float  time;
};

Texture2D t_unit0 : register(t0);
Texture2D t_unit1 : register(t1);
Texture2D t_unit2 : register(t2);
SamplerState SampleType : register(s0);

float3 RayleighScattering(float cosTheta) {
	float rayleigh = 1 + cosTheta * cosTheta;
	float3 betaR = float3(0.0058, 0.0135, 0.0331);
	return betaR * rayleigh;
}

float3 MieScattering(float cosTheta) {
	float mieIntensity = 0.1;

	float mie = pow(1.0 + cosTheta, 8.0);
	float3 betaM = float3(0.02, 0.015, 0.01);
	return betaM * mie * mieIntensity;
}

float3 SunGlow(float cosTheta) {
	float3 betaS = float3(1.0, 0.7, 0.4);
    return smoothstep(0.99973, 1.0, cosTheta) * betaS;
}

// V - ray dir, L - sun dir
float3 ComputeSkyColor(float3 V, float3 L) {

	float3 Z = float3(0, 1, 0); // Zenith

	float cosTheta = max(dot(V, L), 0);
	float zFactor = sqrt(max(dot(Z, L), 0));

	float3 R = RayleighScattering(cosTheta) * 20 * zFactor;
	float3 M = MieScattering(cosTheta);
	float3  G = SunGlow(cosTheta);

	//R = R * float3(1.0, 0.7, 0.4);

	return R + M + G;

#if 0
	float height = max(0.0, camerapos.y);
	float rayleighFactor = exp(-height / 8.0);
	float3 rayleighColor = float3(0.3, 0.5, 1.0) * rayleighFactor;

	float mieFactor = exp(-height / 1.2);
	float3 mieColor = float3(1.0, 0.5, 0.2) * mieFactor;

	float cosTheta = dot(V, sun_dir);
	float phaseRayleigh = 0.75 * (1.0 + cosTheta * cosTheta);
	float phaseMie = 1.0 / pow(1.0 + 0.1 * (1.0 - cosTheta * cosTheta), 1.5);

	return rayleighColor * phaseRayleigh + mieColor * phaseMie;
#endif
}

PSOUTPUT pmain(PSINPUT psin, bool isFrontFace: SV_IsFrontFace) {
	
	float3 V = normalize(psin.vpos - camerapos);
	float3 L = normalize(sun_dir);
	float3 N = normalize(V);

	float3 skycolor = ComputeSkyColor(V, L);

	//float3 result = lerp(float4(skycolor, 1.0), float4(cloud, cloudDensity), 1 - cloudDensity).xyz;
	float3 result = skycolor;// + cloud;

	//float3 N = 0;
	PSOUTPUT pout;
	pout.albedo.xyz = result;    // Albedo
	pout.albedo.w   = 0;
	pout.normal.xyz = N;         // Normal (!! NOT USED in skybox !!)
	pout.normal.w   = 1;
	pout.wpos.xyz   = psin.vpos; // Wpos
	pout.wpos.w     = -1;
	return pout;

}
